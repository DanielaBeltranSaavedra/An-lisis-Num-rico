ysen[i]=sin(x[i])
}
seg <- seq.int(0, 10, length.out = 12)
segcos <- seq.int(0, 10, length.out = 12)
fx <- vector(length = length(seg))
for (i in 1:length(seg)) {
fx[i] <- f3(seg[i])
}
fxcos <- vector(length = length(segcos))
for (i in 1:length(segcos)) {
fxcos[i] <- f4(segcos[i])
}
for(i in 1:trapecios){
if(i==trapecios){
arr[i]=ysen[i*amplitud]
}else{
arr[i]=abs(ysen[i*amplitud])+abs(ysen[(i+1)*amplitud])
}
contador=((arr[i]/2)*amplitud)*0.07
if(i==1){
print (contador)
}
sum=(sum+contador)
}
cat("la suma de las areas son ",sum)
trapecios=10
x=seq(0,2*pi,length=100)
plot(x,cos(x),type="l",col="blue",lwd=3)
lines(x,sin(x),col="green",lwd=3)
abline (h=0.0,col="black")
legend("bottomleft",col=c("blue","green"),legend =c("Coseno","Seno"), lwd=3, bty = "n")
areaSeno<-function(x1){
return(sin(x1))
}
areaCoseno<-function(x2){
return(cos(x2))
}
x1=seq(0,pi/4,length=100)
x2=seq(pi/4,pi/2,length=100)
polygon(c(x1,x2),c(areaSeno(x1),areaCoseno(x2)),border=NA,col=col2rgb("yellow",0.5))
contador=0
amplitud=90/10
arr=c()
sum=0
var=1
x=seq(0 , 10, 0.1)
ysen=c()
for(i in 1:length(x)){
ysen[i]=sin(x[i])
}
seg <- seq.int(0, 10, length.out = 12)
segcos <- seq.int(0, 10, length.out = 12)
fx <- vector(length = length(seg))
for (i in 1:length(seg)) {
fx[i] <- f3(seg[i])
}
fxcos <- vector(length = length(segcos))
for (i in 1:length(segcos)) {
fxcos[i] <- f4(segcos[i])
}
for(i in 1:trapecios){
if(i==trapecios){
arr[i]=ysen[i*amplitud]
}else{
arr[i]=abs(ysen[i*amplitud])+abs(ysen[(i+1)*amplitud])
}
contador=((arr[i]/2)*amplitud)*0.07
if(i==1){
print (contador)
cat("la suma de las areas son ",contador)
}
sum=(sum+contador)
}
f = function(x){
return((1-(x^2))^(1/2))
}
longitudCurva = function(a,b,n){
suma = 0
datos = seq(a,b,by=((b-a)/n))
i = 1
for(i in 1:(length(datos)-1)){
deltaY = f(datos[i+1])-f(datos[i])
deltaX = datos[i+1]-datos[i]
calculo = sqrt(1+(deltaY/deltaX)^2)*deltaX
suma = calculo + suma
}
return(c(suma,datos))
}
a = -1
b = 1
n = 1000
m=10
l = longitudCurva(a,b,n)
cat(l[1])
datos = l[2:length(l)]
graficar = function(datos,a,b,paso,raro){
x = seq(a,b,by=((b-a)/n))
y = f(x)
x2 = seq(a,b,by=((b-a)/m))
y2= f(x2)
plot(x,y,type="l",asp=1)
plot(x2,y2,type="l",asp=1)
lines(datos,f(datos),col="red",lwd=5)
lines(datos,f(datos),col="blue",lwd=1)
}
graficar(datos,1,-1,n,m)
datos
f = function(x){
return(sin(x))
}
longitudCurva = function(a,b,n){
suma = 0
datos = seq(a,b,by=((b-a)/n))
i = 1
for(i in 1:(length(datos)-1)){
deltaY = f(datos[i+1])-f(datos[i])
deltaX = datos[i+1]-datos[i]
calculo = sqrt(1+(deltaY/deltaX)^2)*deltaX
suma = calculo + suma
}
return(c(suma,datos))
}
a = 0
b = 2
n = 1000
m=10
l = longitudCurva(a,b,n)
print("la longitud de curva es ",l)
cat(l[1])
datos = l[2:length(l)]
graficar = function(datos,a,b,paso,raro){
x = seq(a,b,by=((b-a)/n))
y = f(x)
x2 = seq(a,b,by=((b-a)/m))
y2= f(x2)
plot(x,y,type="l",asp=1)
plot(x2,y2,type="l",asp=1)
lines(datos,f(datos),col="red",lwd=5)
lines(datos,f(datos),col="blue",lwd=1)
}
graficar(datos,1,-1,n,m)
datos
f = function(x){
return(sin(x))
}
longitudCurva = function(a,b,n){
suma = 0
datos = seq(a,b,by=((b-a)/n))
i = 1
for(i in 1:(length(datos)-1)){
deltaY = f(datos[i+1])-f(datos[i])
deltaX = datos[i+1]-datos[i]
calculo = sqrt(1+(deltaY/deltaX)^2)*deltaX
suma = calculo + suma
}
return(c(suma,datos))
}
a = 0
b = 2
n = 1000
m=10
l = longitudCurva(a,b,n)
print("la longitud de curva es ",l)
#cat(l[1])
datos = l[2:length(l)]
graficar = function(datos,a,b,paso,raro){
x = seq(a,b,by=((b-a)/n))
y = f(x)
x2 = seq(a,b,by=((b-a)/m))
y2= f(x2)
plot(x,y,type="l",asp=1)
plot(x2,y2,type="l",asp=1)
lines(datos,f(datos),col="red",lwd=5)
lines(datos,f(datos),col="blue",lwd=1)
}
graficar(datos,1,-1,n,m)
datos
f = function(x){
return(sin(x))
}
longitudCurva = function(a,b,n){
suma = 0
datos = seq(a,b,by=((b-a)/n))
i = 1
for(i in 1:(length(datos)-1)){
deltaY = f(datos[i+1])-f(datos[i])
deltaX = datos[i+1]-datos[i]
calculo = sqrt(1+(deltaY/deltaX)^2)*deltaX
suma = calculo + suma
}
return(c(suma,datos))
}
a = 0
b = 2
n = 1000
m=10
l = longitudCurva(a,b,n)
print("la longitud de curva es ",l)
cat(l[1])
datos = l[2:length(l)]
graficar = function(datos,a,b,paso,raro){
x = seq(a,b,by=((b-a)/n))
y = f(x)
x2 = seq(a,b,by=((b-a)/m))
y2= f(x2)
plot(x,y,type="l",asp=1)
plot(x2,y2,type="l",asp=1)
lines(datos,f(datos),col="red",lwd=5)
lines(datos,f(datos),col="blue",lwd=1)
}
graficar(datos,1,-1,n,m)
#datos
f = function(x){
return(sin(x))
}
longitudCurva = function(a,b,n){
suma = 0
datos = seq(a,b,by=((b-a)/n))
i = 1
for(i in 1:(length(datos)-1)){
deltaY = f(datos[i+1])-f(datos[i])
deltaX = datos[i+1]-datos[i]
calculo = sqrt(1+(deltaY/deltaX)^2)*deltaX
suma = calculo + suma
}
return(c(suma,datos))
}
a = 0
b = 2*pi
n = 1000
m=10
l = longitudCurva(a,b,n)
print("la longitud de curva es ",l)
cat(l[1])
datos = l[2:length(l)]
graficar = function(datos,a,b,paso,raro){
x = seq(a,b,by=((b-a)/n))
y = f(x)
x2 = seq(a,b,by=((b-a)/m))
y2= f(x2)
plot(x,y,type="l",asp=1)
plot(x2,y2,type="l",asp=1)
lines(datos,f(datos),col="red",lwd=5)
lines(datos,f(datos),col="blue",lwd=1)
}
graficar(datos,1,-1,n,m)
#datos
f = function(x){
return(sin(x))
}
longitudCurva = function(a,b,n){
suma = 0
datos = seq(a,b,by=((b-a)/n))
i = 1
for(i in 1:(length(datos)-1)){
deltaY = f(datos[i+1])-f(datos[i])
deltaX = datos[i+1]-datos[i]
calculo = sqrt(1+(deltaY/deltaX)^2)*deltaX
suma = calculo + suma
}
return(c(suma,datos))
}
a = 0
b = 2*pi
n = 1000
m=10
l = longitudCurva(a,b,n)
print("la longitud de curva es ",l)
cat(l[1])
datos = l[2:length(l)]
graficar = function(datos,a,b,paso,raro){
x = seq(a,b,by=((b-a)/n))
y = f(x)
x2 = seq(a,b,by=((b-a)/m))
y2= f(x2)
plot(x,y,type="l",asp=1)
plot(x2,y2,type="l",asp=1)
lines(datos,f(datos),col="red",lwd=5)
lines(datos,f(datos),col="blue",lwd=1)
}
graficar(datos,1,-1,n,m)
integer((sqrt(1+(cos^2(x)))),0,2)
#datos
f = function(x){
return(sin(x))
}
longitudCurva = function(a,b,n){
suma = 0
datos = seq(a,b,by=((b-a)/n))
i = 1
for(i in 1:(length(datos)-1)){
deltaY = f(datos[i+1])-f(datos[i])
deltaX = datos[i+1]-datos[i]
calculo = sqrt(1+(deltaY/deltaX)^2)*deltaX
suma = calculo + suma
}
return(c(suma,datos))
}
a = 0
b = 2*pi
n = 1000
m=10
l = longitudCurva(a,b,n)
print("la longitud de curva es ",l)
cat(l[1])
datos = l[2:length(l)]
graficar = function(datos,a,b,paso,raro){
x = seq(a,b,by=((b-a)/n))
y = f(x)
x2 = seq(a,b,by=((b-a)/m))
y2= f(x2)
plot(x,y,type="l",asp=1)
plot(x2,y2,type="l",asp=1)
lines(datos,f(datos),col="red",lwd=5)
lines(datos,f(datos),col="blue",lwd=1)
}
graficar(datos,1,-1,n,m)
integer((sqrt(1+(cos^2(x)))),0,2*pi)
#datos
longitudCurva = function(a,b,n){
suma = 0
datos = seq(a,b,by=((b-a)/n))
i = 1
for(i in 1:(length(datos)-1)){
deltaY = f(datos[i+1])-f(datos[i])
deltaX = datos[i+1]-datos[i]
calculo = sqrt(1+(deltaY/deltaX)^2)*deltaX
suma = calculo + suma
}
return(c(suma,datos))
}
a = 0
b = 2*pi
n = 1000
m=10
l = longitudCurva(a,b,n)
print("la longitud de curva es ",l)
cat(l[1])
datos = l[2:length(l)]
graficar = function(datos,a,b,paso,raro){
x = seq(a,b,by=((b-a)/n))
y = f(x)
x2 = seq(a,b,by=((b-a)/m))
y2= f(x2)
plot(x,y,type="l",asp=1)
plot(x2,y2,type="l",asp=1)
lines(datos,f(datos),col="red",lwd=5)
lines(datos,f(datos),col="blue",lwd=1)
}
graficar(datos,1,-1,n,m)
fun<- function(x) sqrt(1+(cos(x))^2)
f = function(x){
return(sin(x))
}
longitudCurva = function(a,b,n){
suma = 0
datos = seq(a,b,by=((b-a)/n))
i = 1
for(i in 1:(length(datos)-1)){
deltaY = f(datos[i+1])-f(datos[i])
deltaX = datos[i+1]-datos[i]
calculo = sqrt(1+(deltaY/deltaX)^2)*deltaX
suma = calculo + suma
}
return(c(suma,datos))
}
a = 0
b = 2*pi
n = 1000
m=10
l = longitudCurva(a,b,n)
print("la longitud de curva es ",l)
cat(l[1])
datos = l[2:length(l)]
graficar = function(datos,a,b,paso,raro){
x = seq(a,b,by=((b-a)/n))
y = f(x)
x2 = seq(a,b,by=((b-a)/m))
y2= f(x2)
plot(x,y,type="l",asp=1)
plot(x2,y2,type="l",asp=1)
lines(datos,f(datos),col="red",lwd=5)
lines(datos,f(datos),col="blue",lwd=1)
}
graficar(datos,1,-1,n,m)
fun<- function(x) sqrt(1+(cos(x))^2)
integer(fun,0,2*pi)
#datos
f = function(x){
return(sin(x))
}
longitudCurva = function(a,b,n){
suma = 0
datos = seq(a,b,by=((b-a)/n))
i = 1
for(i in 1:(length(datos)-1)){
deltaY = f(datos[i+1])-f(datos[i])
deltaX = datos[i+1]-datos[i]
calculo = sqrt(1+(deltaY/deltaX)^2)*deltaX
suma = calculo + suma
}
return(c(suma,datos))
}
a = 0
b = 2*pi
n = 1000
m=10
l = longitudCurva(a,b,n)
print("la longitud de curva es ",l)
cat(l[1])
datos = l[2:length(l)]
graficar = function(datos,a,b,paso,raro){
x = seq(a,b,by=((b-a)/n))
y = f(x)
x2 = seq(a,b,by=((b-a)/m))
y2= f(x2)
plot(x,y,type="l",asp=1)
plot(x2,y2,type="l",asp=1)
lines(datos,f(datos),col="red",lwd=5)
lines(datos,f(datos),col="blue",lwd=1)
}
graficar(datos,1,-1,n,m)
fun<- function(x) sqrt(1+(cos(x))^2)
integer(fun,0,pi)
#datos
f = function(x){
return(sin(x))
}
longitudCurva = function(a,b,n){
suma = 0
datos = seq(a,b,by=((b-a)/n))
i = 1
for(i in 1:(length(datos)-1)){
deltaY = f(datos[i+1])-f(datos[i])
deltaX = datos[i+1]-datos[i]
calculo = sqrt(1+(deltaY/deltaX)^2)*deltaX
suma = calculo + suma
}
return(c(suma,datos))
}
a = 0
b = 2*pi
n = 1000
m=10
l = longitudCurva(a,b,n)
print("la longitud de curva es ",l)
cat(l[1])
datos = l[2:length(l)]
graficar = function(datos,a,b,paso,raro){
x = seq(a,b,by=((b-a)/n))
y = f(x)
x2 = seq(a,b,by=((b-a)/m))
y2= f(x2)
plot(x,y,type="l",asp=1)
plot(x2,y2,type="l",asp=1)
lines(datos,f(datos),col="red",lwd=5)
lines(datos,f(datos),col="blue",lwd=1)
}
graficar(datos,1,-1,n,m)
fun<- function(x){
return(sqrt(1+(cos(x))^2))
}
integer(fun,0,pi)
#datos
trapecios=10
x=seq(0,2*pi,length=100)
plot(x,cos(x),type="l",col="blue",lwd=3)
lines(x,sin(x),col="green",lwd=3)
abline (h=0.0,col="black")
legend("bottomleft",col=c("blue","green"),legend =c("Coseno","Seno"), lwd=3, bty = "n")
areaSeno<-function(x1){
return(sin(x1))
}
areaCoseno<-function(x2){
return(cos(x2))
}
x1=seq(0,pi/4,length=100)
x2=seq(pi/4,pi/2,length=100)
polygon(c(x1,x2),c(areaSeno(x1),areaCoseno(x2)),border=NA,col=col2rgb("yellow",0.5))
contador=0
amplitud=90/10
arr=c()
sum=0
var=1
x=seq(0 , 10, 0.1)
ysen=c()
for(i in 1:length(x)){
ysen[i]=sin(x[i])
}
seg <- seq.int(0, 10, length.out = 12)
segcos <- seq.int(0, 10, length.out = 12)
fx <- vector(length = length(seg))
for (i in 1:length(seg)) {
fx[i] <- f3(seg[i])
}
fxcos <- vector(length = length(segcos))
for (i in 1:length(segcos)) {
fxcos[i] <- f4(segcos[i])
}
for(i in 1:trapecios){
if(i==trapecios){
arr[i]=ysen[i*amplitud]
}else{
arr[i]=abs(ysen[i*amplitud])+abs(ysen[(i+1)*amplitud])
}
contador=((arr[i]/2)*amplitud)*0.07
if(i==1){
print (contador)
cat("la suma de las areas son ",contador)
}
sum=(sum+contador)
}
